generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid()) @map("_id")
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean        @default(false)
  summary       String         @default("")
  accounts      Account[]
  entries       Entry[]
  healthProfile HealthProfile?
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entry {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthProfile {
  id              String   @id @default(cuid()) @map("_id")
  height          Int
  weight          Int
  dob             DateTime
  allergies       String
  bloodType       String
  bloodSugarLevel Int
  medicalHistory  String
  hasInsurance    Boolean  @default(false)
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
